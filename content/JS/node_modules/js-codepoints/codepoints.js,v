head	0.4;
access;
symbols;
locks
	dankogai:0.4; strict;
comment	@# @;


0.4
date	2013.04.02.07.29.42;	author dankogai;	state Exp;
branches;
next	0.3;

0.3
date	2013.03.30.14.01.33;	author dankogai;	state Exp;
branches;
next	0.2;

0.2
date	2013.03.29.07.04.43;	author dankogai;	state Exp;
branches;
next	0.1;

0.1
date	2013.03.29.06.12.16;	author dankogai;	state Exp;
branches;
next	;


desc
@@


0.4
log
@*** empty log message ***
@
text
@/*
 * $Id: codepoints.js,v 0.3 2013/03/30 14:01:33 dankogai Exp dankogai $
 *
 * codepoints.js
 *
 *  (c) 2013 Dan Kogai
 *
 *  Licensed under the MIT license.
 *  http://www.opensource.org/licenses/mit-license
 *
 */
(function(root) {
    'use strict';
    // utilities
    var defineProperty = Object.defineProperty;
    var install = function(o, k, f) {
        if (Object.defaultProperty) {
            Object.defaultProperty(
                o, k,
                {value: f, writable: true, configurable: true}
            );
        } else {
            if (o[k]) return;
            o[k] = f;
            if (defineProperty) defineProperty(o, k, {enumerable: false});
        }
    };
    var fromCharCode = String.fromCharCode;
    // let the show begin
    var re_uchars = /([\uD800-\uDBFF][\uDC00-\uDFFFF]|[\S\s])/g;
    install(RegExp, 'RE_UCHARS', re_uchars);
    // number of codepoints in the string -- needs ES5
    install(String.prototype, 'codePointsOf', function() {
        return ('' + this).replace(re_uchars, '_').length;
    });
    if (defineProperty) {
        defineProperty(String.prototype, 'codepoints', {
            get: function() { return ('' + this).codePointsOf() }
        });
    }
    install(String.prototype, 'forEachUChar', function(f, ctx) {
        var i = 0, s = '' + this;
        s.replace(re_uchars, function(u) {
            f.call(ctx, u, i++, s);
        });
    });
    install(String.prototype, 'toArrayOfUChars', function() {
        return ('' + this).match(re_uchars);
    });
    install(String.prototype, 'uCharAt', function(n) {
        return ('' + this).toArrayOfUChars()[n];
    });
    // ES6 proposals
    install(String, 'fromCodePoint', function(n) {
        if (n < 0 && n > 0x10FFFF)
            throw new RangeError('invalid codepoint');
        if (n < 0xFFFF) return fromCharCode(n);
        var offset = n - 0x10000,
        hi = (offset >>> 10) + 0xD800,
        lo = (offset & 0x3FF) + 0xDC00;
        return fromCharCode(hi) + fromCharCode(lo);
    });
    install(String.prototype, 'codePointAt', function(n) {
        var c = ('' + this).toArrayOfUChars()[n];
        if (!c) return NaN;
        if (c.length === 1) return c.charCodeAt(0);
        return 0x10000
            + (c.charCodeAt(0) - 0xD800) * 0x400
            + (c.charCodeAt(1) - 0xDC00);
    });
})(this);
@


0.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
 * $Id: codepoints.js,v 0.2 2013/03/29 07:04:43 dankogai Exp dankogai $
d48 1
a48 3
        var ret = [];
        ('' + this).replace(re_uchars, function(cp) { ret.push(cp) });
        return ret;
@


0.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
 * $Id: codepoints.js,v 0.1 2013/03/29 06:12:16 dankogai Exp dankogai $
d15 1
a15 2
    var dummyfun = function(){};
    var defineProperty = Object.defineProperty || dummyfun;
d17 10
a26 3
        if (o[k]) return;
        o[k] = f;
        defineProperty(o, k, {enumerable:false})
d34 1
a34 1
        return this.replace(re_uchars, '_').length;
d36 1
a36 1
    if (defineProperty !== dummyfun) {
d38 1
a38 1
            get: function() { return this.codePointsOf() }
d42 2
a43 2
        var i = 0, s = this;
        this.replace(re_uchars, function(u) {
d49 1
a49 1
        this.replace(re_uchars, function(cp){ ret.push(cp) });
d53 1
a53 1
        return this.toArrayOfUChars()[n]
d57 1
a57 1
        if (n < 0 && n > 0x10FFFF) 
d61 1
a61 1
        hi = (offset >>>  10) + 0xD800,
d66 1
a66 1
        var c = this.toArrayOfUChars()[n];
d69 1
a69 1
        return 0x10000 
@


0.1
log
@*** empty log message ***
@
text
@d2 1
a2 1
 * $Id$
d27 3
d32 1
a32 3
            get: function() {
                return this.replace(re_uchars, '_').length;
            }
@
